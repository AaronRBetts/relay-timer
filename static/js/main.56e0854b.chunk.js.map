{"version":3,"sources":["App.js","components/TimerDisplay.js","components/TimerControl.js","serviceWorker.js","index.js"],"names":["timerInterval","TimerDisplay","props","id","display","icon","audioEnabled","faVolumeUp","faVolumeMute","onClick","toggleAudio","runTime","breakTime","TimerControl","title","heading","incBtnId","faArrowUp","label","Math","floor","time","decBtnId","faArrowDown","App","toggleDisplay","setState","state","reset","currentRunTime","currentBreakTime","runInterval","breakInterval","isRunning","clearInterval","document","getElementById","pause","currentTime","handleControl","direction","control","convertToTime","secs","minutes","seconds","audio","handlePlay","bind","decrementTime","this","setInterval","play","className","running","faPlay","faPause","faRedo","faSync","src","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.56e0854b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { TimerDisplay } from './components/TimerDisplay';\nimport { TimerControl } from './components/TimerControl';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlay, faPause, faRedo, faSync } from '@fortawesome/free-solid-svg-icons';\n\n//declare the timer interval\nlet timerInterval\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: 'timer',\n      isRunning: false,\n      runInterval: 25 * 60,\n      breakInterval: 5 * 60,\n      currentRunTime: 25 * 60,\n      currentBreakTime: 5 * 60,\n      audio: true\n    }\n    this.handlePlay = this.handlePlay.bind(this);\n    this.decrementTime = this.decrementTime.bind(this);\n  }\n\n  toggleDisplay = () => {\n    // toggles between controlling & displaying the break time and run time\n    this.setState({\n      display: this.state.display === 'timer' ? 'break' : 'timer'\n    });\n  }\n\n  reset = () => {\n    // resets the break interval\n    this.setState({\n      currentRunTime: 25 * 60,\n      currentBreakTime: 5 * 60,\n      runInterval: 25 * 60,\n      breakInterval: 5 * 60,\n      display: 'timer',\n      isRunning: false\n    })\n    clearInterval(timerInterval);\n    document.getElementById('beep').pause();\n    document.getElementById('beep').currentTime = 0\n  }\n\n  handleControl = (direction, control) => {\n    // change interval assuming interval does not go to 0 after change\n    if (control === 'session-label' \n    && (this.state.runInterval - 60 > 0 || direction === 'increment')\n    && (this.state.runInterval + 60 < 3660 || direction === 'decrement')) {\n      this.setState ({\n        runInterval: this.state.runInterval + (direction === 'increment' ? 60 : -60),\n        currentRunTime: this.state.currentRunTime + (direction === 'increment' ? 60 : -60)\n      });\n    }\n    if (control === 'break-label' \n    && (this.state.breakInterval - 60 > 0 || direction === 'increment')\n    && (this.state.breakInterval + 60 < 3660 || direction === 'decrement')) {\n      this.setState({\n        breakInterval: this.state.breakInterval + (direction === 'increment' ? 60 : -60),\n        currentBreakTime: this.state.currentBreakTime + (direction === 'increment' ? 60 : -60)\n      }); \n    }\n  }\n\n  handlePlay() {\n    if (this.state.isRunning) {\n      clearInterval(timerInterval);\n    } else {\n      timerInterval = setInterval(this.decrementTime, 1000);\n      this.setState({\n        display: 'timer'\n      })\n    }\n    this.setState({\n      isRunning: !this.state.isRunning\n    });\n  }\n\n  decrementTime() {\n    // runs the clock down when the play/pause button is pressed\n    this.state.display === 'timer' ? \n    this.setState ({\n      currentRunTime: this.state.currentRunTime -1\n    }) : \n    this.setState({\n      currentBreakTime: this.state.currentBreakTime -1\n    })\n    // switch between break & timer & set to the interval\n    if (this.state.currentRunTime < 0) {\n      this.setState({\n        display: 'break',\n        currentRunTime: this.state.runInterval\n      });\n      document.getElementById('beep').play();\n    }\n    if (this.state.currentBreakTime < 0) {\n      this.setState({\n        display: 'timer',\n        currentBreakTime: this.state.breakInterval\n      });\n      if (this.state.audio) {\n        document.getElementById('beep').play();        \n      }\n    }\n  }\n\n  convertToTime = (secs) => {\n    //converts time in seconds to X:XX format for display\n    let minutes = Math.floor(secs / 60);\n    let seconds = secs % 60;\n    if (seconds < 10) {\n      seconds = `0${seconds}`\n    }\n    if (minutes < 10) {\n      minutes = `0${minutes}`\n    }\n    return `${minutes}:${seconds}`;\n  }\n\n  toggleAudio = () => {\n    this.setState({\n      audio: !this.state.audio\n    })\n  }\n\n  render() {\n    return (\n      <div id=\"timerDisplay\" className=\"timer-display\">\n        <h1 id='title'>Relay Timer</h1>\n        <div className=\"control-display\">\n          <TimerControl \n          heading={'session length'}\n          incBtnId={'session-increment'}\n          decBtnId={'session-decrement'}\n          label={'session-length'}\n          title={'session-label'}\n          time={this.state.runInterval}\n          onClick={this.handleControl} />\n          <TimerControl \n          heading={'break length'}\n          incBtnId={'break-increment'}\n          decBtnId={'break-decrement'}\n          label={'break-length'}\n          title={'break-label'}\n          time={this.state.breakInterval}\n          onClick={this.handleControl} />\n        </div>\n        <TimerDisplay \n        display={this.state.display} \n        running={this.state.isRunning}\n        runTime={this.convertToTime(this.state.currentRunTime)}\n        breakTime={this.convertToTime(this.state.currentBreakTime)}\n        toggleAudio={this.toggleAudio} \n        audioEnabled={this.state.audio}/>\n        <div className=\"button-row\">\n          <button id=\"start_stop\" onClick={this.handlePlay}><FontAwesomeIcon icon={faPlay} /> <FontAwesomeIcon icon={faPause} /></button>\n          <button id=\"reset\" onClick={this.reset}><FontAwesomeIcon icon={faRedo} /></button>\n          <button onClick={this.toggleDisplay}><FontAwesomeIcon icon={faSync} /></button>\n        </div>\n        <audio id=\"beep\" src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"></audio>\n      </div>\n    )\n  }\n}","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faVolumeUp, faVolumeMute } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport const TimerDisplay = (props) => {\r\n  return (\r\n    <div id='display'>\r\n      <h3 id=\"timer-label\">{props.display}</h3>\r\n      <button id=\"audioBtn\"><FontAwesomeIcon id=\"audio-icon\" icon={props.audioEnabled ? faVolumeUp : faVolumeMute} onClick={props.toggleAudio}/></button>\r\n      <p id=\"time-left\">{props.display === 'timer' ? props.runTime : props.breakTime}</p>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faArrowDown, faArrowUp } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport const TimerControl = (props) => {\r\n  return (\r\n    <div id={props.title}>\r\n      <h3>{props.heading}</h3>\r\n      <button id={props.incBtnId} onClick={() => props.onClick('increment', props.title)}><FontAwesomeIcon icon={faArrowUp} /></button>\r\n      <p id={props.label}>{Math.floor(props.time / 60)}</p>\r\n      <button id={props.decBtnId} onClick={() => props.onClick('decrement', props.title)}><FontAwesomeIcon icon={faArrowDown} /></button>\r\n    </div>\r\n  )\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}